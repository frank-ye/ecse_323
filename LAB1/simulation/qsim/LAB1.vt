// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2017 13:18:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g08_adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g08_adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
// wires                                               
wire Cout;
wire [7:0] SUM;

// assign statements (if any)                          
g08_adder i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cout(Cout),
	.SUM(SUM)
);
initial 
begin 
#640000 $stop;
end 

// A[5]
initial
begin
	A[5] = 1'b0;
	A[5] = #310000 1'b1;
	A[5] = #320000 1'b0;
end 

// A[4]
initial
begin
	A[4] = 1'b0;
	A[4] = #150000 1'b1;
	A[4] = #160000 1'b0;
	A[4] = #160000 1'b1;
	A[4] = #160000 1'b0;
end 

// A[3]
initial
begin
	A[3] = 1'b0;
	# 70000;
	repeat(3)
	begin
		A[3] = 1'b1;
		A[3] = #80000 1'b0;
		# 80000;
	end
	A[3] = 1'b1;
	A[3] = #80000 1'b0;
end 

// A[2]
initial
begin
	A[2] = 1'b0;
	# 30000;
	repeat(7)
	begin
		A[2] = 1'b1;
		A[2] = #40000 1'b0;
		# 40000;
	end
	A[2] = 1'b1;
	A[2] = #40000 1'b0;
end 

// A[1]
initial
begin
	A[1] = 1'b0;
	# 10000;
	repeat(15)
	begin
		A[1] = 1'b1;
		A[1] = #20000 1'b0;
		# 20000;
	end
	A[1] = 1'b1;
	A[1] = #20000 1'b0;
end 

// A[0]
always
begin
	A[0] = 1'b1;
	A[0] = #10000 1'b0;
	#10000;
end 
initial 
begin 
#640000 $stop;
end 
endmodule

