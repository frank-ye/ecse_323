// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2017 16:56:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g08_pulseGenerator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g08_pulseGenerator_vlg_sample_tst(
	BUTTON,
	CLK,
	sampler_tx
);
input  BUTTON;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(BUTTON or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g08_pulseGenerator_vlg_check_tst (
	counter,
	PULSE_EN,
	sampler_rx
);
input [10:0] counter;
input  PULSE_EN;
input sampler_rx;

reg [10:0] counter_expected;
reg  PULSE_EN_expected;

reg [10:0] counter_prev;
reg  PULSE_EN_prev;

reg [10:0] counter_expected_prev;
reg  PULSE_EN_expected_prev;

reg [10:0] last_counter_exp;
reg  last_PULSE_EN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	counter_prev = counter;
	PULSE_EN_prev = PULSE_EN;
end

// update expected /o prevs

always @(trigger)
begin
	counter_expected_prev = counter_expected;
	PULSE_EN_expected_prev = PULSE_EN_expected;
end



// expected counter[10]
initial
begin
	counter_expected[10] = 1'bX;
end 

// expected counter[9]
initial
begin
	counter_expected[9] = 1'bX;
end 

// expected counter[8]
initial
begin
	counter_expected[8] = 1'bX;
end 

// expected counter[7]
initial
begin
	counter_expected[7] = 1'bX;
end 

// expected counter[6]
initial
begin
	counter_expected[6] = 1'bX;
end 

// expected counter[5]
initial
begin
	counter_expected[5] = 1'bX;
end 

// expected counter[4]
initial
begin
	counter_expected[4] = 1'bX;
end 

// expected counter[3]
initial
begin
	counter_expected[3] = 1'bX;
end 

// expected counter[2]
initial
begin
	counter_expected[2] = 1'bX;
end 

// expected counter[1]
initial
begin
	counter_expected[1] = 1'bX;
end 

// expected counter[0]
initial
begin
	counter_expected[0] = 1'bX;
end 

// expected PULSE_EN
initial
begin
	PULSE_EN_expected = 1'bX;
end 
// generate trigger
always @(counter_expected or counter or PULSE_EN_expected or PULSE_EN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected counter = %b | expected PULSE_EN = %b | ",counter_expected_prev,PULSE_EN_expected_prev);
	$display("| real counter = %b | real PULSE_EN = %b | ",counter_prev,PULSE_EN_prev);
`endif
	if (
		( counter_expected_prev[0] !== 1'bx ) && ( counter_prev[0] !== counter_expected_prev[0] )
		&& ((counter_expected_prev[0] !== last_counter_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[0] = counter_expected_prev[0];
	end
	if (
		( counter_expected_prev[1] !== 1'bx ) && ( counter_prev[1] !== counter_expected_prev[1] )
		&& ((counter_expected_prev[1] !== last_counter_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[1] = counter_expected_prev[1];
	end
	if (
		( counter_expected_prev[2] !== 1'bx ) && ( counter_prev[2] !== counter_expected_prev[2] )
		&& ((counter_expected_prev[2] !== last_counter_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[2] = counter_expected_prev[2];
	end
	if (
		( counter_expected_prev[3] !== 1'bx ) && ( counter_prev[3] !== counter_expected_prev[3] )
		&& ((counter_expected_prev[3] !== last_counter_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[3] = counter_expected_prev[3];
	end
	if (
		( counter_expected_prev[4] !== 1'bx ) && ( counter_prev[4] !== counter_expected_prev[4] )
		&& ((counter_expected_prev[4] !== last_counter_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[4] = counter_expected_prev[4];
	end
	if (
		( counter_expected_prev[5] !== 1'bx ) && ( counter_prev[5] !== counter_expected_prev[5] )
		&& ((counter_expected_prev[5] !== last_counter_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[5] = counter_expected_prev[5];
	end
	if (
		( counter_expected_prev[6] !== 1'bx ) && ( counter_prev[6] !== counter_expected_prev[6] )
		&& ((counter_expected_prev[6] !== last_counter_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[6] = counter_expected_prev[6];
	end
	if (
		( counter_expected_prev[7] !== 1'bx ) && ( counter_prev[7] !== counter_expected_prev[7] )
		&& ((counter_expected_prev[7] !== last_counter_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[7] = counter_expected_prev[7];
	end
	if (
		( counter_expected_prev[8] !== 1'bx ) && ( counter_prev[8] !== counter_expected_prev[8] )
		&& ((counter_expected_prev[8] !== last_counter_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[8] = counter_expected_prev[8];
	end
	if (
		( counter_expected_prev[9] !== 1'bx ) && ( counter_prev[9] !== counter_expected_prev[9] )
		&& ((counter_expected_prev[9] !== last_counter_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[9] = counter_expected_prev[9];
	end
	if (
		( counter_expected_prev[10] !== 1'bx ) && ( counter_prev[10] !== counter_expected_prev[10] )
		&& ((counter_expected_prev[10] !== last_counter_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[10] = counter_expected_prev[10];
	end
	if (
		( PULSE_EN_expected_prev !== 1'bx ) && ( PULSE_EN_prev !== PULSE_EN_expected_prev )
		&& ((PULSE_EN_expected_prev !== last_PULSE_EN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PULSE_EN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PULSE_EN_expected_prev);
		$display ("     Real value = %b", PULSE_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_PULSE_EN_exp = PULSE_EN_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module g08_pulseGenerator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BUTTON;
reg CLK;
// wires                                               
wire [10:0] counter;
wire PULSE_EN;

wire sampler;                             

// assign statements (if any)                          
g08_pulseGenerator i1 (
// port map - connection between master ports and signals/registers   
	.BUTTON(BUTTON),
	.CLK(CLK),
	.counter(counter),
	.PULSE_EN(PULSE_EN)
);

// BUTTON
initial
begin
	BUTTON = 1'b1;
	BUTTON = #50000000 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 10000;
	repeat(4999)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
	CLK = 1'b0;
end 

g08_pulseGenerator_vlg_sample_tst tb_sample (
	.BUTTON(BUTTON),
	.CLK(CLK),
	.sampler_tx(sampler)
);

g08_pulseGenerator_vlg_check_tst tb_out(
	.counter(counter),
	.PULSE_EN(PULSE_EN),
	.sampler_rx(sampler)
);
endmodule

