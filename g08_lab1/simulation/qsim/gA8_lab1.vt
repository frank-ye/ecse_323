// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2017 14:14:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    gA8_comp7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module gA8_comp7_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [6:0] A;
input [6:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module gA8_comp7_vlg_check_tst (
	AeqB,
	sampler_rx
);
input  AeqB;
input sampler_rx;

reg  AeqB_expected;

reg  AeqB_prev;

reg  AeqB_expected_prev;

reg  last_AeqB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	AeqB_prev = AeqB;
end

// update expected /o prevs

always @(trigger)
begin
	AeqB_expected_prev = AeqB_expected;
end



// expected AeqB
initial
begin
	AeqB_expected = 1'bX;
	AeqB_expected = #999000 1'b0;
end 
// generate trigger
always @(AeqB_expected or AeqB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AeqB = %b | ",AeqB_expected_prev);
	$display("| real AeqB = %b | ",AeqB_prev);
`endif
	if (
		( AeqB_expected_prev !== 1'bx ) && ( AeqB_prev !== AeqB_expected_prev )
		&& ((AeqB_expected_prev !== last_AeqB_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AeqB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AeqB_expected_prev);
		$display ("     Real value = %b", AeqB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AeqB_exp = AeqB_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#98304000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module gA8_comp7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] A;
reg [6:0] B;
// wires                                               
wire AeqB;

wire sampler;                             

// assign statements (if any)                          
gA8_comp7 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AeqB(AeqB),
	.B(B)
);
// A[ 6 ]
always
begin
	A[6] = 1'b0;
	A[6] = #384000 1'b1;
	#384000;
end 
// A[ 5 ]
always
begin
	A[5] = 1'b0;
	A[5] = #192000 1'b1;
	#192000;
end 
// A[ 4 ]
always
begin
	A[4] = 1'b0;
	A[4] = #96000 1'b1;
	#96000;
end 
// A[ 3 ]
always
begin
	A[3] = 1'b0;
	A[3] = #48000 1'b1;
	#48000;
end 
// A[ 2 ]
always
begin
	A[2] = 1'b0;
	A[2] = #24000 1'b1;
	#24000;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #12000 1'b1;
	#12000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #6000 1'b1;
	#6000;
end 
// B[ 6 ]
initial
begin
	repeat(18)
	begin
		B[6] = 1'b0;
		B[6] = #2688000 1'b1;
		# 2688000;
	end
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	repeat(36)
	begin
		B[5] = 1'b0;
		B[5] = #1344000 1'b1;
		# 1344000;
	end
	B[5] = 1'b0;
	B[5] = #1344000 1'b1;
end 
// B[ 4 ]
initial
begin
	repeat(73)
	begin
		B[4] = 1'b0;
		B[4] = #672000 1'b1;
		# 672000;
	end
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	repeat(146)
	begin
		B[3] = 1'b0;
		B[3] = #336000 1'b1;
		# 336000;
	end
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	repeat(292)
	begin
		B[2] = 1'b0;
		B[2] = #168000 1'b1;
		# 168000;
	end
	B[2] = 1'b0;
	B[2] = #168000 1'b1;
end 
// B[ 1 ]
initial
begin
	repeat(585)
	begin
		B[1] = 1'b0;
		B[1] = #84000 1'b1;
		# 84000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(1170)
	begin
		B[0] = 1'b0;
		B[0] = #42000 1'b1;
		# 42000;
	end
	B[0] = 1'b0;
end 

gA8_comp7_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

gA8_comp7_vlg_check_tst tb_out(
	.AeqB(AeqB),
	.sampler_rx(sampler)
);
endmodule

